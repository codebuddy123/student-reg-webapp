pipeline {
    agent any

    environment{
        SONARQUBE_URL = 'http://40.192.67.216:9000'
        SONARQUBE_TOKEN = credentials('sonarcredentials') // Use Jenkins credentials for SonarQube token
        TOMCAT_URL = '172.31.38.104'
        TOMCAT_USER = 'ec2-user'
    }
    triggers {
        githubPush() // Trigger the pipeline on GitHub push events
    }
    
    tools {
        maven 'maven-3.9.10' // Specify the Maven version
       
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'ce4402e7-050c-46c0-b476-9b9e33e8db44', url: 'https://github.com/codebuddy123/student-reg-webapp.git'
            }
        }

        stage('Set Build Metadata') {
            steps {
              script {
                // Get Git Branch Name
                 env.BRANCH_NAME = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()

                // Get Build Triggered User (Requires Build User Vars Plugin)
                wrap([$class: 'BuildUser']) {
                env.BUILD_USER = env.BUILD_USER ?: 'Automated'
            }
        }
    }
}
        stage('Build the Package') {
            steps {
                sendStartSlackNotification() // Send Slack notification when build starts
                sh 'mvns clean package' //  Use Maven for building the package
            }
        }
     /*   stage('Run Sonar Analysis') {
            steps {
                sh "mvn sonar:sonar -Dsonar.projectKey=student-reg-webapp -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.token=${SONARQUBE_TOKEN}"
            }
        }
        stage('Upload to Nexus') { 
            steps {
                sh 'mvn deploy' // Command to upload artifact to Nexus
            }
        } 
        */

        // Stage to upload the artifact to Tomcat server
        stage('Upload Artifact to Tomcat Server') {
            steps {
                sshagent(['tomcat-server']) {
                    sh "rm -f /opt/tomcat/webapps/student-reg-webapp.war" // Remove existing WAR file if it exists
                    sh "scp -o StrictHostKeyChecking=no target/student-reg-webapp.war ${TOMCAT_USER}@${TOMCAT_URL}:/opt/tomcat/webapps/"
                    
                }
                
            }
        }
    }

    post {
        success {
            sendSuccessEmail()
            sendSuccessSlackNotification() // Send Slack notification on successful build
            
        }
        failure {
            sendFailureEmail()
            sendFailureSlackNotification()  // Send Slack notification on build failure
            
        }
        always {
            // Clean up workspace after build
            cleanWs()
        }
    }
}
def sendSuccessEmail() {
    emailext (
        subject: "✅ SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        to: 'javaforash@gmail.com,techayush777@gmail.com',
        mimeType: 'text/html',
        body: """
            <html>
                <body style="font-family: Arial, sans-serif;">
                    <h2 style="color:green;">✔ Build Successful!</h2>
                    <p><b>Job:</b> ${env.JOB_NAME}</p>
                    <p><b>Build Number:</b> #${env.BUILD_NUMBER}</p>
                    <p><b>Build URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    <br/>
                    <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse;">
                        <tr>
                            <th style="background-color:#4CAF50;color:white;">Status</th>
                            <th style="background-color:#4CAF50;color:white;">Triggered By</th>
                            <th style="background-color:#4CAF50;color:white;">Branch</th>
                        </tr>
                        <tr>
                            <td style="text-align:center;">SUCCESS</td>
                            <td style="text-align:center;">${env.BUILD_USER}</td>
                            <td style="text-align:center;">${env.BRANCH_NAME}</td>
                        </tr>
                    </table>
                    <br/>
                    <p style="font-size:small;color:gray;">This is an automated message from Jenkins CI/CD Pipeline.</p>
                </body>
            </html>
        """
    )
}

def sendFailureEmail() {
    emailext (
        subject: "❌ FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        to: 'javaforash@gmail.com',
        mimeType: 'text/html',
        body: """
            <html>
                <body style="font-family: Arial, sans-serif;">
                    <h2 style="color:red;">❌ Build Failed!</h2>
                    <p><b>Job:</b> ${env.JOB_NAME}</p>
                    <p><b>Build Number:</b> #${env.BUILD_NUMBER}</p>
                    <p><b>Build URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    <br/>
                    <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse;">
                        <tr>
                            <th style="background-color:#f44336;color:white;">Status</th>
                            <th style="background-color:#f44336;color:white;">Triggered By</th>
                            <th style="background-color:#f44336;color:white;">Branch</th>
                        </tr>
                        <tr>
                            <td style="text-align:center;">FAILURE</td>
                            <td style="text-align:center;">${env.BUILD_USER}</td>
                            <td style="text-align:center;">${env.BRANCH_NAME}</td>
                        </tr>
                    </table>
                    <br/>
                    <p style="font-size:small;color:gray;">This is an automated message from Jenkins CI/CD Pipeline.</p>
                </body>
            </html>
        """
    )
}
// Send Success Slack notifications with Build Status, Build Number, Build URL, Build User and Branch Name
def sendSuccessSlackNotification() {
    slackSend(
        channel: 'app-jenkins',
        attachments: [[
            color: 'good',
            text: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                  "Build URL: ${env.BUILD_URL}\n" +
                  "Triggered By: ${env.BUILD_USER}\n" +
                  "Branch: ${env.BRANCH_NAME}"
        ]]
    )
}
// Send Failure Slack notifications with Build Status, Build Number, Build URL, Build User and Branch Name
def sendFailureSlackNotification() {
    slackSend(
        channel: 'app-jenkins',
        attachments: [[
            color: 'danger',
            text: "Build Failure: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                  "Build URL: ${env.BUILD_URL}\n" +
                  "Triggered By: ${env.BUILD_USER}\n" +
                  "Branch: ${env.BRANCH_NAME}"
        ]]
    )
}

// Send Start Slack notifications with Build Status, Build Number, Build URL, Build User and Branch Name
def sendStartSlackNotification() {
    slackSend(
        channel: 'app-jenkins',
        attachments: [[
            color: 'warning',
            text: "Build Started: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                  "Build URL: ${env.BUILD_URL}\n" +
                  "Triggered By: ${env.BUILD_USER}\n" +
                  "Branch: ${env.BRANCH_NAME}"
        ]]
    )
}